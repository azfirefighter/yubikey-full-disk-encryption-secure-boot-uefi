[{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/intro.html#1","title":"YubiKey Full Disk Encryption","content":"This repository contains a step-by-step tutorial to create a full disk encryption setup with two factor authentication (2FA) via YubiKey. It contains: YubiKey encrypted root (\/) and home (\/home) folder on separated partitions Encrypted \/boot partition UEFI Secure boot (self signed boot loader) YubiKey authentication for user login Currently guides for: Arch Linux Additional security chapter: Disable INTEL AMT Disable AMD PSP "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/intro.html#1-1","title":"Why","content":"It took me several days to figure out how to set up a fully encrypted machine with 2FA. This guide should help others to get it done in minutes (hopefully). There exists a plenty bunch of tutorials but no one contains a step-by-step guide to get the above things done. I guess the entire manual will take between 1 - 3 hours. "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/intro.html#1-2","title":"Prerequisites","content":"You should be familiar with linux and should be able to edit files with vi Vi Cheat Sheet. You need an USB stick for the Linux Live environment and a second computer would be useful for look ups and to read this guide while preparing your fully encrypted Linux.And of course you will need at least two YubiKeys.WARNING: You gonna get a bricked machine if you only have a single Yubikey and it breaks."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/intro.html#1-3","title":"Support this guide","content":" Star this project on GitHub Spread this guide, so everyone can use it Help to improve this guide, create an issue "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/intro.html#1-4","title":"Documentation","content":"For the latest online documentation visit http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/. Refer the Quick Start section for a detailed explanation.Documentation is in the book tree, and can be compiled using bookdown or Docker$ docker run -it --rm -v $(pwd):\/app sandrokeil\/bookdown bookdown.json $ docker run -it --rm -p 8080:8080 -v $(pwd):\/app php:7.1-cli php -S 0.0.0.0:8080 -t \/app\/html or run bookdown$ .\/vendor\/bin\/bookdown bookdown.json $ php -S 0.0.0.0:8080 -t html\/ Then browse to http:\/\/localhost:8080\/"},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/getting-started.html#3-1-1","title":"Getting Started","content":"For common stuff, the Arch Wiki is a good starting point. You need a bootable Arch Linux medium. Please take a look at the Arch installation guide en \/ de.Ok, you've create a bootable Arch Linux medium, now it's time to boot into the Arch Linux UEFI system.German users should execute loadkeys de (QWERTZ keyboard layout) in the tty prompt first.Let's install minimal packages to get started of full disk encryption with YubiKey.pacman -Sy yubikey-manager yubikey-personalization pcsc-tools libu2f-host make json-c cryptsetup Now start the smartcard servicesystemctl start pcscd.service and our connected YubiKey should be listed withykman list That's it, now let's go over to the next chapter which describes how to prepare disks."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-disk.html#3-1-2","title":"Prepare Disks","content":"You have different choices to setup encryption. This chapter describes LVM on LUKS with encrypted boot partition. Because we want to unlock all volumes at once.List your disks with lsblk and run gdisk \/dev\/[your disk] e.g. gdisk \/dev\/nvme0n1. You can take a look at the gdisk Arch Wiki en \/ de It's crucial to use gdisk because GPT is needed for UEFI boot. Please create 4 partition like described in the Arch Wiki above with gdisk. Use the codes for the partition type. Don't format the partitions at this time, you will do it later with the YubiKey. It should look similar like this.Number Start (sector) End (sector) Size Code Name 1 2048 4095 1024.0 KiB EF02 BIOS boot partition 2 4096 1232895 600.0 MiB EF00 EFI System 3 1232896 2461695 600.0 MiB 8300 Linux filesystem 4 2461696 2000409230 952.7 GiB 8E00 Linux LVM The second partition contains the EFI System and must be of type FAT32. Format the second partition (replace [device 2nd partition] with the 2nd partition of your device e.g. \/dev\/nvme0n1p2) with:mkfs.fat -F32 \/dev\/[device 2nd partition] Great, one step closer for your fully encrypted system. The next chapter describes how to prepare the YubiKey."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-yubikey.html#3-1-3","title":"Prepare YubiKey","content":"Download or mount yubikey-full-disk-encryption and install it in your Arch Linux Live environment. This is needed because we will format the 4th partition with YubiKey."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-yubikey.html#3-1-3-1","title":"Installation","content":"Open the yubikey-full-disk-encryption folder and run make.cd yubikey-full-disk-encryption make install "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-yubikey.html#3-1-3-2","title":"Prepare 2nd slot","content":"Now it's time to prepare the second slot of your YubiKey for the challenge response authentication. Touch will be also enabled. You can also install the package yubikey-personalization-gui. It allows for customization of the secret key, creation of secret key backup and writing the same secret key to multiple YubiKeys which allows for using them interchangeably for creating same ykfde passphrases. Securely save the 20 byte length secret key from the output, so you can use it to initialize another YubiKey as backup. ykpersonalize -v -2 -ochal-resp -ochal-hmac -ohmac-lt64 -ochal-btn-trig -oserial-api-visible "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-yubikey.html#3-1-3-3","title":"Configure ykfde","content":"Open \/etc\/ykfde.conf and set YKFDE_CHALLENGE_SLOT=2 because we want to use the second slot. Set YKFDE_CHALLENGE_PASSWORD_NEEDED=1 so it asks for the password (2FA). Leave other settings as is, it will be changed later. Please compare it carefully with the latest version you have downloaded. # Configuration for yubikey-full-disk-encryption. (\"\") means an empty value. ### *REQUIRED* ### # Set to non-empty value to use 'Automatic mode with stored challenge (1FA)'. #YKFDE_CHALLENGE=\"\" # Use 'Manual mode with secret challenge (2FA)'. YKFDE_CHALLENGE_PASSWORD_NEEDED=\"1\" # Choose YubiKey slot configured for 'HMAC-SHA1 Challenge-Response' mode. Possible values are \"1\" or \"2\". YKFDE_CHALLENGE_SLOT=\"2\" ### OPTIONAL ### # Set partition UUID. Leave empty to use 'cryptdevice' kernel parameter. #YKFDE_DISK_UUID=\"\" # Set LUKS encrypted volume name. Leave empty to use 'cryptdevice' kernel parameter. #YKFDE_LUKS_NAME=\"\" # If left empty this will be set as \"\/dev\/disk\/by-uuid\/$YKFDE_DISK_UUID\" -- device to unlock with 'cryptsetup luksOpen'. #YKFDE_LUKS_DEV=\"\" # Optional flags passed to 'cryptsetup luksOpen'. Example: \"--allow-discards\" for TRIM support. Leave empty to use cryptdevice kernel parameter. #YKFDE_LUKS_OPTIONS=\"\" # Number of times to assemble passphrase and run 'cryptsetup luksOpen'. Defaults to \"5\". #YKFDE_CRYPTSETUP_TRIALS=\"5\" # Number of seconds to wait for inserting YubiKey, \"-1\" means 'unlimited'. Defaults to \"30\". #YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT=\"30\" # Number of seconds passed to 'sleep' after succesful decryption. Defaults to empty, meaning NO sleep. #YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP=\"\" # Enable verbose output. It will print all secrets to terminal. Use only for debugging. #DBG=\"1\" "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-yubikey.html#3-1-3-4","title":"Encrypt 4th partition","content":"Next step is to format the 4th partition. You can modify the arguments if you know what you are doing. Ensure that you use the 4th partition, replace [device 4th partition] with the 4th partition of your device e.g. nvme0n1p4 ykfde-format --cipher aes-xts-plain64 --key-size 512 --hash sha256 --iter-time 5000 --type luks2 \/dev\/[device 4th partition] ykfde-open -d \/dev\/[device 4th partition] -n cryptlvm Display the crypt volume with ls -la \/dev\/mapper\/. Next step is to prepare the logical volumes."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-volumes.html#3-1-4","title":"Prepare Volumes","content":"Please take a look at the Arch Wiki page Preparing the logical volumes to create \/ and \/home directory\/partitions. In short you do this (without swap). The filesystem ext4 is used. pvcreate \/dev\/mapper\/cryptlvm vgcreate MyVolGroup \/dev\/mapper\/cryptlvm lvcreate -L 30G MyVolGroup -n root lvcreate -l 100%FREE MyVolGroup -n home mkfs.ext4 \/dev\/MyVolGroup\/root mkfs.ext4 \/dev\/MyVolGroup\/home mount \/dev\/MyVolGroup\/root \/mnt mkdir \/mnt\/home mount \/dev\/MyVolGroup\/home \/mnt\/home "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-volumes.html#3-1-4-1","title":"Encrypted boot partition","content":"The last volume is \/boot which should also be encrypted. You can not use a YubiKey here, but it is protected with a password. The Arch Wiki page Preparing the boot partition describes this in more detail. The efi partition will be mounted to \/boot\/efi. Be aware, GRUB boot loader uses US keyboard layout. Consider this for your password! Execute the following commands and replace [device 3rd partition] with the 3rd partition of your device e.g. nvme0n1p3 and replace [device 2nd partition] with the 2nd partition of your device e.g. nvme0n1p2.cryptsetup luksFormat \/dev\/[device 3rd partition] cryptsetup open \/dev\/[device 3rd partition] cryptboot ls \/dev\/mapper mkfs.ext4 \/dev\/mapper\/cryptboot mkdir \/mnt\/boot mount \/dev\/mapper\/cryptboot \/mnt\/boot mkdir \/mnt\/boot\/efi mount \/dev\/[device 2nd partition] \/mnt\/boot\/efi "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-volumes.html#3-1-4-2","title":"Keyfile for initramfs","content":"With a keyfile embedded in the initramfs you don't have to unlock the \/boot partition twice. The \/boot partition will be mounted if the system starts, so updates can be performed.Create a randomized generated key file with the following lines and add this keyfile to the 3rd LUKS partition (replace [device 3rd partition] with the 3rd partition of your device e.g. nvme0n1p3). The keyfile is copied in the root folder of the new Arch linux environment.dd bs=512 count=4 if=\/dev\/urandom of=\/mnt\/crypto_keyfile.bin chmod 000 \/mnt\/crypto_keyfile.bin cryptsetup luksAddKey \/dev\/[device 3rd partition] \/mnt\/crypto_keyfile.bin "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5","title":"Install Arch Linux","content":"This chapter describes how to install a minimal Arch Linux. You will find an appropriated page in the Arch Wiki en \/ de."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-1","title":"Basic stuff","content":"The base package and some additional packages for the YubiKey and full disk encryption will be installed to the \/mnt folder. If you want to know more about the individual package, please take a look at the Arch package site.pacstrap \/mnt base yubikey-manager yubikey-personalization pcsc-tools libu2f-host acpid dbus grub-efi-x86_64 efibootmgr lvm2 "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-2","title":"Generate fstab","content":"The following command will generate the fstab entries of the currently mounted partitions.genfstab -U -p \/mnt &gt;&gt; \/mnt\/etc\/fstab Check it out with cat \/mnt\/etc\/fstab and verify it."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-3","title":"YubiKey Full Disk Encryption","content":"Next step is to copy the yubikey-full-disk-encryption folder to the \/mnt folder because it will be installed later. The YubiKey challenge is stored in a file to make it available inside the new system. More on that later. Replace [Your YubiKey password] with your YubiKey password.cp -r yubikey-full-disk-encryption \/mnt\/home\/ echo \"export YKFDE_CHALLENGE=$(printf [Your YubiKey password] | sha256sum | awk '{print $1}')\" &gt; \/mnt\/home\/challenge.txt Copy \/etc\/ykde.conf to \/mnt\/home so you can use this file later in your new environment."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-4","title":"Mount run folder","content":"When running grub-mkconfig you will see the error \/run\/lvm\/lvmetad.socket: connect failed: No such file or directory. That's why the host \/run folder must be available inside the chroot environment. This is prepared with the following lines and finished later on.mkdir \/mnt\/hostrun\/ mount --bind \/run \/mnt\/hostrun "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-5","title":"chroot","content":"It's time to switch into your new system with arch-chroot \/mnt and prepare some stuff. After successfully changed root to the new system, execute the following lines to make the hosts lvm available here for grub-mkconfig.mkdir \/run\/lvm mount --bind \/hostrun\/lvm \/run\/lvm Next step is to install the yubikey-full-disk-encryption helper scripts. If they are not already copied in your home folder, you can it download from the GitHub repository yubikey-full-disk-encryption.cd \/home\/yubikey-full-disk-encryption make install Copy \/home\/ykde.conf to \/etc\/ykde.conf so you have your previous settings or configure the file as described in chapter Prepare YubiKey. The YubiKey challenge will now be stored in the ykde.conf file. The environment variable with the YubiKey challenge is loaded into the environment so it can be set into the ykde.conf file with the command sed.source \/home\/challenge.txt sed -i \"s\/#YKFDE_CHALLENGE=\/YKFDE_CHALLENGE=$YKFDE_CHALLENGE\/g\" \/etc\/ykde.conf Check that the YubiKey challenge was successfully saved to \/etc\/ykde.conf with cat \/etc\/ykde.conf."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-6","title":"mkinitcpio","content":"The next step is to prepare the mkinitcpio.conf to detect and unlock an encrypted partition at boot. Open the file with vi \/etc\/mkinitcpio.conf and replace the HOOKS line with the following content. Don't add encrypt hook, because we ues ykfde and respect the order !!! HOOKS=(base udev autodetect consolefont modconf block keymap lvm2 filesystems fsck keyboard ykfde) Additionally the ext4 module is needed. Add ext4 to the MODULES. It should look like this line:MODULES=(ext4) "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-7","title":"GRUB","content":"The next part is a bit tricky, because you have to figure out the correct device UUIDs. First, get a list of your device IDs with lsblk -f it should look something like this:NAME FSTYPE LABEL UUID MOUNTPOINT nvme0n1 \u00e2\u0094\u009c\u00e2\u0094\u0080nvme0n1p1 \u00e2\u0094\u009c\u00e2\u0094\u0080nvme0n1p2 vfat AB24-1550 \/boot\/efi \u00e2\u0094\u009c\u00e2\u0094\u0080nvme0n1p3 crypto_LUKS 434a512a-1b76-449e-8cb0-f93aee46e85c \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080cryptboot ext4 5fe2b9c5-ac2b-4f6e-8f3e-5e45c45d0b02 \/boot \u00e2\u0094\u0094\u00e2\u0094\u0080nvme0n1p4 crypto_LUKS a86c6534-6643-4afa-b3ae-c78a0a5dc50f \u00e2\u0094\u0094\u00e2\u0094\u0080cryptlvm LVM2_member heTIE6-0pLH-8J8Y-67T7-1vPW-4f1V-SqHeOA \u00e2\u0094\u009c\u00e2\u0094\u0080MyVolGroup-root ext4 49a833a2-4a3b-4a1b-a7d9-75ab50910a8e \/ \u00e2\u0094\u0094\u00e2\u0094\u0080MyVolGroup-home ext4 ec626537-c6a5-4df9-9ad9-3a344bc8c86f \/home You will need the UUID from the device 4th partition (in this example a86c6534-6643-4afa-b3ae-c78a0a5dc50f) and the UUID of MyVolGroup-root (in this example 49a833a2-4a3b-4a1b-a7d9-75ab50910a8e). Open the GRUB config file with vi \/etc\/default\/grub and add these two lines with your UUIDs.GRUB_CMDLINE_LINUX=\"cryptdevice=UUID=[4th partition UUID]:cryptlvm root=UUID=[MyVolGroup-root UUID]\" GRUB_ENABLE_CRYPTODISK=y Finally the GRUB_CMDLINE_LINUX line should look like this line with your UUIDs.GRUB_CMDLINE_LINUX=\"cryptdevice=UUID=a86c6534-6643-4afa-b3ae-c78a0a5dc50f:cryptlvm root=UUID=49a833a2-4a3b-4a1b-a7d9-75ab50910a8e\" "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-8","title":"Generate initramfs","content":"The last step is to generate a new initramfs and the GRUB boot loader. The first one is done with mkinitcpio -p linux and the second one with the following lines (replace [your device] with your device e.g. nvme0n1):grub-install --target=i386-pc --recheck \/dev\/[your device] grub-install --target=x86_64-efi --efi-directory=\/boot\/efi --bootloader-id=GRUB --recheck grub-mkconfig -o \/boot\/grub\/grub.cfg Add the crypto_keyfile.bin to the crypttab, otherwise you have to unlock the boot partition twice. Open the file with vi \/etc\/crypttab and add the following line (replace [UUID 3rd partition] with the UUID of the 3rd partition e.g. 434a512a-1b76-449e-8cb0-f93aee46e85c).cryptboot UUID=[UUID 3rd partition] \/crypto_keyfile.bin luks It should look like this with your UUID of the 3rd partition.cryptboot UUID=434a512a-1b76-449e-8cb0-f93aee46e85c \/crypto_keyfile.bin luks "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-9","title":"Configure ykde.conf","content":"Open the file with vi \/etc\/ykde.conf and enable\/set YKFDE_LUKS_NAME=\"cryptlvm\" and YKFDE_DISK_UUID=[4th partition UUID] (replace [4th partition UUID] with the UUID of the 4th partition e.g. a86c6534-6643-4afa-b3ae-c78a0a5dc50f). Feel free to modify it to your needs e.g. enable TRIM (but be warned, there are potential security implications) support. It should look something like this# Configuration for yubikey-full-disk-encryption. (\"\") means an empty value. ### *REQUIRED* ### # Set to non-empty value to use 'Automatic mode with stored challenge (1FA)'. YKFDE_CHALLENGE=\"8fa0acf6233b92d2d48a30a315cd213748d48f28eaa63d7590509392316b3016\" # Use 'Manual mode with secret challenge (2FA)'. YKFDE_CHALLENGE_PASSWORD_NEEDED=\"1\" # Choose YubiKey slot configured for 'HMAC-SHA1 Challenge-Response' mode. Possible values are \"1\" or \"2\". YKFDE_CHALLENGE_SLOT=\"2\" ### OPTIONAL ### # Set partition UUID. Leave empty to use 'cryptdevice' kernel parameter. YKFDE_DISK_UUID=\"a86c6534-6643-4afa-b3ae-c78a0a5dc50f\" # Set LUKS encrypted volume name. Leave empty to use 'cryptdevice' kernel parameter. YKFDE_LUKS_NAME=\"cryptlvm\" # If left empty this will be set as \"\/dev\/disk\/by-uuid\/$YKFDE_DISK_UUID\" -- device to unlock with 'cryptsetup luksOpen'. #YKFDE_LUKS_DEV=\"\" # Optional flags passed to 'cryptsetup luksOpen'. Example: \"--allow-discards\" for TRIM support. Leave empty to use cryptdevice kernel parameter. #YKFDE_LUKS_OPTIONS=\"\" # Number of times to assemble passphrase and run 'cryptsetup luksOpen'. Defaults to \"5\". #YKFDE_CRYPTSETUP_TRIALS=\"5\" # Number of seconds to wait for inserting YubiKey, \"-1\" means 'unlimited'. Defaults to \"30\". #YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT=\"30\" # Number of seconds passed to 'sleep' after succesful decryption. Defaults to empty, meaning NO sleep. #YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP=\"\" # Enable verbose output. It will print all secrets to terminal. Use only for debugging. #DBG=\"1\" "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5-10","title":"Test it","content":"It's time to check you settings with a graceful reboot. If you have done all things right you will be asked for your boot parition password to see the GRUB boot menu and after that the YubiKey password with YubiKey touch button to unlock the root partition.Good luck! Don't worry if something doesn't work, simply boot from the Arch Linux medium, install the necessary software to mount your encrypted partitions and check the configs. Maybe an UUID is wrong.Now you can setup your Arch Linux e.g. create own user or add additional stuff en \/ de. The next chapter describes how to setup UEFI secure boot. The last piece to bullet proof your full disk encryption."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/secure-boot.html#3-1-6","title":"Setup secure boot","content":"This chapter describes how to configure secure boot because no one should modify the bootloader or boot from another medium. Gerke Max Preussner describes this very detailed in his post Fully Encrypted ArchLinux with Secure Boot on Yoga 920 Please read his chapter about secure boot and come back to enable it."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/secure-boot.html#3-1-6-1","title":"UEFI setup mode","content":"To create own UEFI keys UEFI secure boot must be set into setup mode in BIOS. Restart the computer and enter BIOS setup. Navigate to the Security page Go to Set Administrator\/Supervisor Password and enter a strong password Go to Reset to Setup Mode, press Enter and select Yes Save the changes and exit BIOS Setup The preloaded secure boot keys for Microsoft\/OEM are now deleted. You can restore it if needed."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/secure-boot.html#3-1-6-2","title":"Setup cryptboot","content":"Download or copy xmikos\/cryptboot to your home folder. To install cryptboot some packages are required. Let's install them.pacman -S binutils fakeroot Next step is to install it without checksum check. Enter the cryptboot folder and execute You can use ArchLinux as name makepkg -si --skipchecksums Almost finished. The last step is to generate and enroll the new keys. This is easy with the following commands:cryptboot-efikeys create cryptboot-efikeys enroll cryptboot update-grub "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/secure-boot.html#3-1-6-3","title":"Pacman hooks","content":"To auto sign the kernel after an upgrade it's handy to have a pacman hook for signing the kernel. Paste Open the file with \/etc\/pacman.d\/hooks\/98-secureboot.hook and put these lines in it.[Trigger] Operation = Install Operation = Upgrade Type = Package Target = linux [Action] Description = Signing Kernel for SecureBoot - Update GRUB When = PostTransaction Exec = \/usr\/bin\/cryptboot update-grub "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/secure-boot.html#3-1-6-4","title":"Enable UEFI secure boot","content":"If you encountered no errors you can now enable UEFI secure boot. Restart the computer and enter BIOS setup. Navigate to the Security page Go to Secure Boot and enable it Save the changes and exit BIOS Setup Try to boot from an USB stick. It should not be possible anymore. If you need to boot from an other medium, disable secure boot."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/yubikey-login.html#3-1-7","title":"Enable YubiKey Login","content":"Alright, you have already setup full disk encryption with YubiKey but what good is this if anyone can log in without YubiKey? This chapter describes how to use the YubiKey for authentication inclusive sudo. Have you already created a new user? Don't use root user here. "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/yubikey-login.html#3-1-7-1","title":"Challenge response authentication setup","content":"You can read more about that in Local Authentication Using Challenge Response. Let's install the needed package yubico-pam:sudo pacman -S yubico-pam Next step is to set the current user to require the YubiKey for logon with the following commands:mkdir $HOME\/.yubico ykpamcfg -2 -v It is generally a good idea to move the challenge file in a system-wide path that is only read- and writable by root. It is important that the file is named with the name of the user that is going to be authenticated by this YubiKey. sudo mkdir \/var\/yubico sudo chown root.root \/var\/yubico sudo chmod 700 \/var\/yubico sudo mv ~\/.yubico\/challenge-123456 \/var\/yubico\/[username]-123456 sudo chown root.root \/var\/yubico\/[username]-123456 sudo chmod 600 \/var\/yubico\/[username]-123456 "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/yubikey-login.html#3-1-7-2","title":"Activation","content":"Let's active the YubiKey for logon. For this open the file with vi \/etc\/pam.d\/system-auth and add the following line after the pam_unix.so line. Please login to another tty in case of something goes wrong so you can deactivate it. Don't forget to become root. auth required pam_yubico.so mode=challenge-response chalresp_path=\/var\/yubico The complete file should look something like this.#%PAM-1.0 auth required pam_unix.so try_first_pass nullok auth required pam_yubico.so mode=challenge-response chalresp_path=\/var\/yubico auth optional pam_permit.so auth required pam_env.so account required pam_unix.so account optional pam_permit.so account required pam_time.so password required pam_unix.so try_first_pass nullok sha512 shadow password optional pam_permit.so session required pam_limits.so session required pam_unix.so session optional pam_permit.so "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/yubikey-login.html#3-1-7-3","title":"Test it","content":"Arch Linux loads the PAM config files on every login. So simply switch to another tty and try to login. After you have entered your password, the YubiKey should flash and you have to touch the YubiKey button. Good luck!Congratulations! You have hopefully successful finished the YubiKey Full Disk Encryption Guide. You have reached the following goals which is really awesome! YubiKey encrypted root (\/) and home (\/home) folder on separated partitions Encrypted \/boot partition UEFI Secure boot (self signed boot loader) YubiKey authentication for user login If you have any suggestions don't hesitate to create an issue to improve this guide. Also spread the word about this guide so more people can secure their system.You should now check the security chapter to improve security further."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/security\/disable-intel-amt.html#4-1","title":"Disable INTEL AMT","content":"This page describes how to disable INTEL Active Management Technology. Please read the whole page before you begin. The INTEL AMT is a security risk. Don't forget to set a secure BIOS supervisor password! "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/security\/disable-intel-amt.html#4-1-1","title":"Open INTEL AMT","content":"To open INTEL AMT press CTRL + P on boot. The default password is admin and you should change it to a secure one. You will be ask to change the password on the first login."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/security\/disable-intel-amt.html#4-1-2","title":"Disable Intel Management Engine State Control","content":"Next step is to Disable Intel Management Engine State Control. Choose Intel ME General Settings from menu Choose Intel ME State Control from menu Choose Disable Choose Previous from menu The machine will reboot now. You can still access INTEL AMT but if you enable it again it should use your password and not the default one."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/security\/disable-intel-amt.html#4-1-3","title":"Disable INTEL AMT in BIOS","content":" Attention: Depending on the used INTEL AMT version you can not disable the Intel Management Engine State Control because then the password will be reset. If you don't see any entry to disable INTEL AMT, check if you have installed the latest BIOS version. Boot into BIOS and search for the Intel AMT entry and enter it. For Lenovo notebooks it's under the menu Config. Choose Disable and save BIOS settings."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/security\/disable-intel-amt.html#4-1-4","title":"Validate password protection","content":"Now it's time to check, if the password is reset if you enable it again. Go into BIOS and enable INTEL AMT, save changes and open INTEL AMT with CTRL + P. Enable it again, the machine will reboot. Go into INTEL AMT with CTRL + P and now you should not be able to login with password admin. Now start from scratch and disable it again."},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/security\/disable-amd-psp.html#4-2","title":"Disable AMD PSP","content":"This page describes how to disable AMD Secure Processor aka AMD Secure Technology. Please read the whole page before you begin. The AMD PSP is a security risk. Don't forget to set a secure BIOS supervisor password! "},{"id":"https:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/security\/disable-amd-psp.html#4-2-1","title":"Disable AMD PSP in BIOS","content":" Attention: If you don't see any option to disable AMD PSP, check if you have installed the latest BIOS version. Boot into BIOS and search for an entry BIOS PSP Support and disable it. It should be in menu Advanced."}]